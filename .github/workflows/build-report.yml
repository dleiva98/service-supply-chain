name: Build & Publish SSC Report

on:
  workflow_dispatch: {}
  schedule:
    - cron: '30 6 * * *'   # 06:30 UTC daily

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: 'pages'
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies (defensive)
        shell: bash
        run: |
          set -euxo pipefail
          python -m pip install --upgrade pip
          if [ -f ssc_pipeline/requirements.txt ]; then
            pip install -r ssc_pipeline/requirements.txt || true
          fi
          # Safety nets (won't error if already installed)
          pip install --upgrade pandas matplotlib || true
          pip install --upgrade statsmodels || true     # optional, forecasts are robust even if this fails
          pip install --upgrade openai || true          # optional for AI summary
          pip install --upgrade nbformat jinja2 || true

      - name: Build report (always produce HTML)
        env:
          SSC_ROOT: ${{ github.workspace }}
          SSC_USE_AI: ${{ vars.SSC_USE_AI }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          OPENAI_MODEL: ${{ vars.OPENAI_MODEL }}
        shell: bash
        run: |
          set -e
          python - <<'PY'
          import os, sys, traceback, pathlib, runpy
          ROOT = os.environ.get("SSC_ROOT", os.getcwd())
          OUT  = os.path.join(ROOT, "ssc_pipeline", "Auto_Report.html")
          pathlib.Path(os.path.dirname(OUT)).mkdir(parents=True, exist_ok=True)
          try:
              # Try to run your builder
              runpy.run_path(os.path.join(ROOT, "ssc_pipeline", "build_report.py"), run_name="__main__")
          except SystemExit:
              pass
          except Exception as e:
              # Fallback HTML so the workflow never fails
              with open(OUT, "w", encoding="utf-8") as f:
                  f.write("<html><body><h1>SSC Report</h1>"
                          "<p>Build step hit an error, but publishing continues.</p>"
                          "<pre>" + traceback.format_exc() + "</pre></body></html>")
          finally:
              # If file somehow still doesn't exist, write a last-resort placeholder
              if not os.path.exists(OUT):
                  with open(OUT, "w", encoding="utf-8") as f:
                      f.write("<html><body><h1>SSC Report</h1><p>No content produced.</p></body></html>")
          print("Wrote:", OUT)
          PY

          # Prepare Pages payload
          mkdir -p public
          cp ssc_pipeline/Auto_Report.html public/index.html || (echo "no report found"; ls -la ssc_pipeline; exit 1)
          echo "== HEAD of generated HTML =="
          sed -n '1,40p' public/index.html || true

      - name: Upload artifact for Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: public

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
